rules_version = '2';

// Firestore Security Rules for Spendless
// These rules ensure data isolation and proper access control

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the account
    function isAccountOwner(accountId) {
      return request.auth.uid == accountId;
    }

    // Helper function to check if user is an admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Helper function to check if request is from Cloud Functions or Service Account
    function isServiceAccount() {
      // Service accounts authenticated via Admin SDK have uid pattern
      return request.auth != null &&
             (request.auth.token.firebase.sign_in_provider == 'custom' ||
              request.auth.uid.matches('.*@.*\\.iam\\.gserviceaccount\\.com'));
    }

    // Helper function to check if user has elevated permissions
    function hasElevatedPermissions() {
      return isAdmin() || isServiceAccount();
    }

    // User Profile Extensions
    // Path: /userProfileExtensions/{userId}
    match /userProfileExtensions/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasElevatedPermissions());
      allow create: if isAuthenticated() && (request.auth.uid == userId || hasElevatedPermissions());
      allow update: if isAuthenticated() && (request.auth.uid == userId || hasElevatedPermissions());
      allow delete: if hasElevatedPermissions();  // Only admins/cloud functions can delete
    }

    // Spending Accounts
    // Path: /accounts/{accountId}
    // Users can only access accounts where accountId matches their user ID
    // Admins and Cloud Functions can access all accounts
    match /accounts/{accountId} {
      allow read: if isAuthenticated() && (isAccountOwner(accountId) || hasElevatedPermissions());
      allow create: if isAuthenticated() && (isAccountOwner(accountId) || hasElevatedPermissions());
      allow update: if isAuthenticated() && (isAccountOwner(accountId) || hasElevatedPermissions());
      allow delete: if isAuthenticated() && (isAccountOwner(accountId) || hasElevatedPermissions());

      // All subcollections under /accounts/{accountId}/**
      // Users have full access to their account's subcollections without restrictions
      match /{document=**} {
        allow read, write: if isAuthenticated() && (isAccountOwner(accountId) || hasElevatedPermissions());
      }
    }

    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
