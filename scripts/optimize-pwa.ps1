# This script performs post-build optimizations for the PWA

Write-Output "Performing PWA post-build optimizations..."

# Define paths
$distDir = Join-Path $PSScriptRoot ".." "dist"
$publicDir = Join-Path $PSScriptRoot ".." "public"
$iconsDir = Join-Path $publicDir "images" "icons"

# Ensure the dist directory exists
if (-Not (Test-Path $distDir)) {
    Write-Error "Build directory not found. Please run build first."
    exit 1
}

# Ensure the icons directory exists in dist
$distIconsDir = Join-Path $distDir "images" "icons"
if (-Not (Test-Path $distIconsDir)) {
    New-Item -Path $distIconsDir -ItemType Directory -Force
    Write-Output "Created icons directory in dist"
}

# Copy any PWA icons if they exist
if (Test-Path $iconsDir) {
    Write-Output "Copying PWA icons to dist..."
    Copy-Item -Path "$iconsDir\*" -Destination $distIconsDir -Recurse -Force
}

# Check if we need to generate a service worker file
if (-Not (Test-Path (Join-Path $distDir "sw.js"))) {
    Write-Output "Service worker not generated by Vite PWA plugin. Creating a placeholder."

    # Create a simple service worker
    $swContent = @"
// Service Worker for PWA
const CACHE_NAME = 'spendless-pwa-v1';
const urlsToCache = [
  '/',
  '/index.html',
  '/favicon.png',
  '/manifest.json'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request);
      })
  );
});

self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
"@

    Set-Content -Path (Join-Path $distDir "sw.js") -Value $swContent
    Write-Output "Created service worker file"
}

# Verify PWA requirements are met
$hasManifest = Test-Path (Join-Path $distDir "manifest.json")
$hasIcons = (Get-ChildItem -Path $distIconsDir -Filter "*.png" -Recurse).Count -gt 0
$hasServiceWorker = Test-Path (Join-Path $distDir "sw.js")

Write-Output ""
Write-Output "PWA Validation:"
Write-Output "- Manifest: $(if ($hasManifest) {'Found ✓'} else {'Missing ✗'})"
Write-Output "- Icons: $(if ($hasIcons) {'Found ✓'} else {'Missing ✗'})"
Write-Output "- Service Worker: $(if ($hasServiceWorker) {'Found ✓'} else {'Missing ✗'})"
Write-Output ""

if ($hasManifest -and $hasIcons -and $hasServiceWorker) {
    Write-Output "PWA optimizations completed successfully!"
} else {
    Write-Warning "Some PWA requirements are missing. Please check the output above."
}
